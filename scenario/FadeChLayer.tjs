/*------------------------------------------------------------------------------
/		Copyright (C) サークル煌明	All Rights Reserved.
/			FadeChLayer
/ 
/ メッセージレイヤで文字をフェード表示させるためのレイヤ
/
/ 親文字字間拡張機能 (ルビ長が親文字より長い際に親文字の字間を広げる機能)
/ 　均等割り付け( align="e" )時にのみ処理が行われる
/ ※ルビ長が親文字より長い際に親文字の字間を広げる機能、における改行について
/	改行処理の手順は以下の通り
/	1. MessageLayerで「字間を広げない状態の親文字の長さ」を元に改行処理を行う
/	2. FadeChLayerでルビ・親文字の処理を行い、親文字の字間を広げる
/	3. MessageLayerが、字間を広げたかチェックを行い、FadeChLayerを適切な位置に
/ 		移動する。「ただし改行処理は行われない」
/ そのため、ルビと親文字の文字数によっては文字が右端(縦書きなら下端)にはみ出て
/ しまう可能性がある。チェックし、手動で改行処理をすること。
/ 
/ メモ：縦書きGrad時にShift-JIS依存のコードを付けようか迷い中。
/       Zへの移植時には注意すること
/----------------------------------------------------------------------------*/
@if(__FADECHLAYER_DEFINED__==0)
@set(__FADECHLAYER_DEFINED__=1)

Scripts.execStorage("SharedContinuousHandler.tjs");
Scripts.execStorage("FadeLayer.tjs");
class FadeChLayer extends FadeLayer {
	var __id;

	var ll, ml;	// 親レイヤ

	var vertical;
	var flag_ch;
	var flag_ruby;
	var flag_hch;

	var cl;				// テンポラリレイヤ

	// ルビ付き・複数文字・縦中横・グラフChなどの複雑な文字を描画するか
	var flag_GradComplexChar;
	// グラデ描画用FadeChLayer
	// 単一の文字を描くときはこのレイヤ自身
	// ルビやchタグによる複数文字を描くときは、MessageLayerからもらってきた別のFadeChLayer
	var GradChLayer;

	var floated;		// （改行などで）他のFadeChLayerから影響を受けなくなったか

//	var fontsize, fontbold, fontface;
	var textwidth, textheight;	// 回転時に利用するテキスト横幅・縦幅

	var ch_left;		// 親文字のleft
	var ch_top;			// 親文字のtop
	var ch_width;		// 親文字の横幅
	var ch_height;		// 親文字の縦幅

	var ruby, rubymode;
	var rx, ry, span;	// ルビ上端位置・"e"時の1文字毎のスペース

	var expandX, expandY;	// 追加で広げた量

	var slantx, slanty;	// ゆらぎ
	var rot=0, rad;		// 回転
	var r_cw, r_ch;		// (回転)レイヤ縦幅横幅
	var r_cwh;		// (回転)文字の縦横の長さの差
	var r_a;		// (回転)拡大した余白
	var r_tx, r_ty;	// (回転)中心
	var rotMove, radMove;	// 回転しながら表示
	var slantMoveX, slantMoveY;			// ゆらぎながら表示
	var skip = false;
	var fade = true;

	// ※親文字字間拡張機能
	// 親文字字間を広げたために、どれだけFadeChLayerをずらすかの量
	// 文字描画後にMessageLayerがこの値にアクセスして、位置調整を行う
	var textExpandLength = 0;
	// 左右（縦書きなら上下）それぞれ何pixelまでルビのはみ出しを許すか
	var textExpandOverflow = 0;

	function FadeChLayer(window, parent) {
		super.FadeLayer(...);
		this.parent = parent;
		ml = parent;	// メッセージレイヤ
		ll = parent.lineLayer;

		deffadetime = ml.chfadetime;
		with(cl = new global.FadeLayer(window, this)) {
			.face = dfAuto;
			.type = ll.type;
			.setPos(0, 0, width, height);
			.fillRect(0, 0, width, height, 0x00000000);
		}
		resetChLayer();
	}

	function finalize() {
		invalidate cl;
		super.finalize(...);
	}

/*
/ @ 設定
/ すべて文字描画／表示開始にのみ呼ばれる
*/

	function copyCondition() {
		with(ll) {
			assignFont(ll);
			hitType = .hitType;
			hitThreshold = .hitThreshold;
			type = .type;
		}
		with(ml) {
			vertical = .vertical;
			textExpandOverflow = .currentRubyOverflow;
			deffadetime = .chfadetime;
			skip = .processChnInF;
			fade = .ch4Fade;
		}
	}

	function initChLayer(_dx, _dy, _dw, _dh) {
		floated = false;

		setPos(
			_dx + slantx + slantMoveX + ll.left, 
			_dy + slanty + slantMoveY + ll.top, 
			_dw, 
			_dh
		);
		r_cw = _dw;
		r_ch = _dh;
		visible = true;

		cl.type = type;
		cl.face = dfAuto;
	}

	function resetChLayer() {
		ruby = "";	rubymode = "e";
		rx = ry = span
			 = opacity
			 = textwidth = textheight
			 = expandX = expandY
			 = slantx = slanty
			 = r_cwh
			 = r_cw = r_ch = r_cwh = r_a = r_tx = r_ty
			 = rad = radMove
			 = slantMoveX = slantMoveY
			 = textExpandLength
		 = 0;

		name="";

		flag_ch
			 = flag_ruby
			 = flag_hch
			 = flag_GradComplexChar
		= false;

		imageWidth = 8;	imageHeight = 8;
		setSizeToImageSize();
		visible = false;

		face = dfAuto;
		fillRect(0, 0, imageWidth, imageHeight, 0);		// 完全透明に
		face = dfProvince;
		fillRect(0, 0, imageWidth, imageHeight, 0);		// 領域をクリア
		face = dfAuto;

		with(cl) {
			.type = type;
			.width = 8; .height = 8;
			.imageWidth = 8;	.imageHeight = 8;
			.setSizeToImageSize();
			.face = dfAuto;
			.fillRect(0, 0, .width, .height, 0);		// 完全透明に
			.face = dfProvince;
			.fillRect(0, 0, .width, .height, 0);		// 完全透明に
			.face = dfAuto;
		}

		rot = rotMove = "n";

		skip = false;
		fade = false;
	}

	function setRuby(sruby, mode = "e") {
		this.ruby = sruby;
		rubymode = mode;
	}

	function setSlant(x, y) {
		slantx += x; slanty += y;
		setPos(slantx, slanty);
	}

	function setSlantMove(x, y) {
		slantMoveX += x if(x!=0);
		slantMoveY += y if(y!=0);
		setPos(x, y);
	}

	function setRad(r) {
		// rotは360度で指定
		// initChLayer が呼ばれる前に呼ばれる
		// ランダムな回転より優先される
		rot = r;
		rad = r*0.01745;			// 0.01745 == 1/180*3.1415
	}

	function setRadMove(r) {
		// rotは360度で指定
		// initChLayer が呼ばれる前に呼ばれる
		// ランダムな回転より優先される
		rotMove = r;
		radMove = r*0.01745;
	}

	function expandLayer(_x, _y) {
	// 左右をxずつ、上下をyずつ広げる。drawText()で描画位置調整が行われる
		var x = (int)Math.abs(_x), y = (int)Math.abs(_y);
		expandX += x, expandY += y;

		width += x*2; height += y*2;
		changedChLinePos( -x, -y );
	}

	function calcRubyPos(x, y) {
	// ルビの位置を計算する
	// 文字からはみ出るときにはレイヤの大きさが変更される
		// フォントの大きさを計測
		var rw = 0;
		if(ruby==="") {
			return;
		}

		var tmp_fruby = flag_ruby;
		onRubyPhase(true);
		rw = font.getTextWidth(ruby);
		onRubyPhase(false);
		flag_ruby = tmp_fruby;

		if(vertical) {
			ry = (ch_width - rw)/2;
			if(rubymode=="e") {		// 均等割り付け
				if( ry < 0 ) {	expandLayer( 0, ry );
				} else {		span = ( (ch_width - rw)/ruby.length );	ry = span/2;	}
			}else if(rubymode=="c") {		// センター
				if( ry < 0 ) expandLayer( 0, ry );
			} else if(rubymode=="r") {	// 下寄せ
				ry = ch_width - rw;
				if( ry < 0 ) expandLayer( 0, ry );
			} else if(rubymode=="l") {	// 上寄せ
				if( ry < 0 ) height += (rw-ch_width);
				ry = 0;
			}
			rx = int(x + ml.rubySize + ml.rubyOffset);
		} else {
			rx = (ch_width - rw)/2;
			if(rubymode=="e") {		// 均等割り付け
				if( rx < 0 ) {	expandLayer( rx, 0 );
				} else {		span = ((ch_width - rw) / (ruby.length) );	rx = span/2;	}
			} else if(rubymode=="c") {		// センター
				if( rx < 0 ) expandLayer( rx, 0 );
			} else if(rubymode=="r") {	// 右寄せ
				rx = ch_width - rw;
				if( rx < 0 ) expandLayer( rx, 0 );
			} else if(rubymode=="l") {	// 左寄せ
				if( rx < 0 ) width += (rw-ch_width);
				rx = 0;
			}
			ry = int(y - ml.rubySize - ml.rubyOffset);
		}
	// 位置補正
		rx += expandX;
		ry += expandY;
	}

	function changedChLinePos(cx, cy) {
		startl += cx, startt += cy;
		goall += cx, goalt += cy;
		if(!doing) { left+=cx, top+=cy; }
	}

/*
/ @ 動作・更新
*/
	function onTimerLayerMover(tickCount) {
		var past = tickCount-starttick;
		if(past>=0) {
			if(past/time<1.0) {
				var per = calcPerAccel(past/time, accel);
				this.opacity	= startopa + int((goalopa - startopa) * per);
				this.left		= startl + int((goall - startl) * per);
				this.top		= startt + int((goalt - startt) * per);
				if(rotMove!="n")
					rotateText(0, 0, (radMove + rad - (radMove*per)), false);
			} else {
				finishLayerMoving();	// 最終状態に移行
			}
		}
	}

	function show(l, t, opa=255, time, accel, delay=0, func, ise=1) {
		if(!doing) ml.addMovingCh();
		if(!fade) this.opacity = 255;
		super.show(...);
	}

	function stopLayerMoving() {
		if(doing) ml.stopMovingCh();
		super.stopLayerMoving(...);
	}

	function finishLayerMoving() {
	// MessageLayerに転写されるとtrueを、しなかったらfalseを返す
		if(doing && rotMove!="n")
			rotateText(0, 0, rad, false);

		super.finishLayerMoving();
		if(floated) return drawCh4Parent();
		return false;
	}

	function drawCh4Parent() {
		if(!visible) return false;
		ml.face = dfAuto;
		ml.operateRect(left, top, this, 0, 0, width, height);
		ml.face = dfProvince;

		resetChLayer();
		ml.putFadeChLayer(this);

		return true;
	}

	function float() {
	// MessageLayerに転写されるとtrueを、しなかったらfalseを返す
		floated = true;
		if(!doing) return drawCh4Parent();
		return false;
	}

	function assign(comp) {
	// メッセージレイヤがトランジション前にassain()する時に呼ばれる
	// 対となる FadeChLayer の情報をコピーし、対と同様の動作をさせる
		with(comp) {
			this.parent = .parent.comp;
			// ↓fadelayer
			hitType = .hitType;
			hitThreshold = .hitThreshold;
			type = .type;
			name = .name;
			startopa	= .startopa;	goalopa	= .goalopa;
			startl		= .startl;		goall	= .goall;
			startt		= .startt;		goalt	= .goalt;
			time		= .time;
			accel		= .accel;
			nowisenabled= .nowisenabled;
			starttick	= .starttick;
			doing		= .doing;
			opacity		= .opacity;
			visible		= .visible;
			setPos(.left, .top, .width, .height);
			// ↑fadelayer

			vertical	= .vertical;
			floated		= .floated;

			textExpandOverflow = .textExpandOverflow;

			ruby		= .ruby;
			rubymode	= .rubymode;
			rx			= .rx;			ry		= .ry;
			span		= .span;

			slantx		= .slantx;		slanty	= .slanty;
			slantMoveX	= .slantMoveX;	slantMoveY	= .slantMoveY;
			rot			= .rot;			rad		= .rad;
			rotMove		= .rotMove;		radMove	= .radMove;

			if(rot!="n" || rotMove!="n") {	// 回転
				r_cw		= .r_cw;		r_ch	= .r_ch;
				r_cwh		= .r_cwh;
				r_a			= .r_a;
				r_tx		= .r_tx;		r_ty	= .r_ty;

				cl.setPos(0, 0, .cl.width, .cl.height);
				cl.operateRect(0, 0, .cl, 0, 0, cl.width, cl.height, omAuto, 255);
				cl.fillRect(cl.width/2-1, cl.height/2-1, 2, 2, 0xffff0000);
				cl.face = .cl.face;
				cl.type = .cl.type;
			}

			operateRect(0, 0, comp, 0, 0, .width, .height, omAuto, 255);
		}
		SharedContinuousHandler_object.entry(this,16,'onTimerLayerMover', true);
	}

/*
/ @ 文字描画
*/
	// 文字描画の起点
	function drawText(x, y, text, col, opa=255, aa=true, sl=255, esC=0, eeX, sX=0, sY=0) {
		ch_width = font.getTextWidth(text);	// 親文字の幅
		ch_height = font.getTextHeight(text);

		if(ruby!="" || text.length >=2) {
			flag_GradComplexChar = true;	// 複雑な文字描画
		}

		calcRubyPos(x, y);	// ルビ計算
		x += expandX; y += expandY;	// 位置補正

		ch_left = x;
		ch_top = y;

		// ※親文字字間拡張機能
		var rubywidth = 0; // とりあえず：親文字の字間を開ける機能。ルビの長さ

		// ルビ
		if(ruby!="") {
			onRubyPhase(true);
			rubywidth = font.getTextWidth(ruby); // ※親文字字間拡張機能用
			if(rubymode=="e" && text.length>1 && ch_width>rubywidth) {	// 均等割り付け
				for(var i=0; i<ruby.length; i++) {
					drawTextWithGrad(rx, ry, ruby[i], 
						ml.r_ChColor, opa, aa, sl, 
						(ml.edge?ml.r_EdgeColor:ml.r_ShadowColor), eeX, sX, sY);
					if(vertical) {	ry += span + font.getTextWidth(ruby[i]); }
					else {		 	rx += span + font.getTextWidth(ruby[i]); }
				}
			} else {			// 均等割り付け以外
				drawTextWithGrad(rx, ry, ruby, 
					ml.r_ChColor, opa, aa, sl, 
					(ml.edge?ml.r_EdgeColor:ml.r_ShadowColor), eeX, sX, sY);
			}
			onRubyPhase(false);
		}

		flag_ch = true;
		// 本文
		if(ruby!="" && rubymode=="e" && rubywidth > ch_width && text.length >=2 ) {
			// ※親文字字間拡張機能
			textExpandLength = rubywidth - ch_width - textExpandOverflow*2;
			var parentspan = (textExpandLength)/(text.length-1);
			if(parentspan >= 1) {
				// 最低でも1px以上は親文字間が開いていないと、意味がない
				if(vertical) { 
					changedChLinePos(0,textExpandLength/2); y -= expandY-ry-textExpandOverflow;
				} else {
					changedChLinePos(textExpandLength/2,0); x -= expandX-rx-textExpandOverflow;
				}
				for(var i=0; i<text.length; i++) {
					drawTextWithGrad(x, y, text[i], col, opa, aa, sl, esC, eeX, sX, sY);
					if(vertical) {	y += parentspan + font.getTextWidth(text[i]); }
					else {			x += parentspan + font.getTextWidth(text[i]); }
				}
			} else {
				textExpandLength = 0;
				drawTextWithGrad(x, y, text, col, opa, aa, sl, esC, eeX, sX, sY);
			}
		} else {
			drawTextWithGrad(x, y, text, col, opa, aa, sl, esC, eeX, sX, sY);
		}

		name = text;

		if(rot!="n" || rotMove!="n") {	// 回転
			if(vertical) {
				textwidth = ch_height; textheight = ch_width;
			} else {
				textwidth = ch_width; textheight = ch_height;
			}
			r_cw = width, r_ch = height;
			rotateText(x, y, rad+radMove, true);
		}

		show(left - slantMoveX, top - slantMoveY, , (skip?0:deffadetime) ) if !doing;
	}

	// グラフ描画の起点
	function drawGraph(cx, cy, lay, color, ischar, edge, shadow, eeX, esC, eEm, sX, sY) {
	// putGraph から
		ch_width = lay.imageWidth;	// 親文字の幅
		ch_height = lay.imageHeight;

		flag_GradComplexChar = true;	// 複雑な文字

		calcRubyPos(cx, cy);	// ルビ計算

		cx += expandX; cy += expandY;

		ch_left = cx;
		ch_top = cy;

		// ルビ
		if(ruby!="") {
			onRubyPhase(true);
			if(vertical) { rx += ch_width; }
			if(edge) {
				drawTextWithGrad(rx, ry, ruby, 
						ml.r_ChColor, 255, ml.antialiased, eEm, 
						ml.r_EdgeColor, eeX, sX, sY);
			} else if(shadow) {
				drawTextWithGrad(rx, ry, ruby, 
						ml.r_ChColor, 255, ml.antialiased, eEm, 
						ml.r_ShadowColor, eeX, sX, sY);
			} else {
				drawTextWithGrad(rx, ry, ruby, 
						ml.r_ChColor, 255, ml.antialiased, 0, 
						0, 0, 0, 0);
			}
			onRubyPhase(false);
		}

		if(ischar && (edge || shadow)) {
			if(ml.chGradObj.doChGrad) {
				var gColor = color, gEdgeColor = esC;

				initGradComplexLayer();

				if(ml.chGradObj.ch) { gColor = 0xffffff; }
				if(ml.chGradObj.edge) { gEdgeColor = 0xffffff; }
				drawGraphCh(cx, cy, lay, gColor, ischar, edge, shadow, eeX, gEdgeColor, eEm, sX, sY);
				GradChLayer.operateRect(0, 0, cl, 0, 0, width, height, omAlpha, 255);

				OperateGradationBase(cx, cy, ch_width, ch_height, eeX, sX, sY);

				if(ml.chGradObj.ch) { gColor = 0x000000; }
				if(ml.chGradObj.edge) { gEdgeColor = 0x000000; }
				drawGraphCh(cx, cy, lay, gColor, ischar, edge, shadow, eeX, gEdgeColor, eEm, sX, sY);

				// 比較(明)合成で、影とグラデを合成
				GradChLayer.operateRect(0, 0, cl, 0, 0, this.width, this.height, omPsLighten, 255); 

				finalizeGradComplexLayer();
			} else {
				drawGraphCh(cx, cy, lay, color, ischar, edge, shadow, eeX, esC, eEm, sX, sY);
				operateRect(0, 0, cl, 0, 0, width, height, omAlpha, 255);
			}
		} else {
			this.operateRect(cx, cy, lay, 0, 0, width, height, omAlpha, 255);
		}

		if(rot!="n" || rotMove!="n") {	// 回転
			textwidth = ch_width; textheight = ch_height;
			r_cw = width;	r_ch = height;
			if(vertical) cx += textwidth;
			else		 textheight -= cy;
			rotateText(cx, cy, rad+radMove, true);
		}
		show(left - slantMoveX, top - slantMoveY, , (skip?0:deffadetime)) if !doing;
	}

	// グラフを文字扱いで描画するときにエッジ・影を描くところ
	function drawGraphCh(cx, cy, lay, color, ischar, edge, shadow, ee, esC, eEm, sX, sY) {
		with(cl) {	// edge・shadowの種を生成
			.holdAlpha = true;
			.setSize(this.width, this.height);
			.fillRect(0, 0, .width, .height, 0x00000000);
			.copyRect(cx, cy, lay, 0, 0, lay.width, lay.height);
			.face = dfOpaque;
			.fillRect(0, 0, .width, .height, esC);
			.face = this.face;
		}

		var tmp = new global.FadeLayer(window, this);
		with(tmp) {
			.holdAlpha = true;
			.face = this.face;
			.type = this.type;
			.setPos(0,0, this.width, this.height);
			.fillRect(0, 0, .width, .height, 0x00000000);
		}

		// clにエッジor影を作成
		if(edge) {
			cl.doBoxBlur(ee, ee);
			var n = eEm\128;
			for(var i=0;i<n;i++){
				tmp.operateRect(0, 0, cl, 0, 0, cl.width, cl.height, omAddAlpha, 128);
			}
			cl.copyRect(0, 0, tmp, 0, 0, cl.width, cl.height);
		} else if(shadow) {
			cl.copyRect(sX, sY, cl, 0, 0, cl.width, cl.height);	// ずらす
		}

		// 画像を文字色に塗ったものを作成
		with(tmp) {
			.fillRect(0, 0, .width, .height, 0x00000000);
			.copyRect(cx, cy, lay, 0, 0, lay.width, lay.height);
			.face = dfOpaque;
			.fillRect(0, 0, .width, .height, color);
			.face = this.face;
		}

		// エッジ・影の上に画像を張り付け
		cl.operateRect(0, 0, tmp, 0, 0, cl.width, cl.height, omAlpha, 255);

		invalidate tmp;
	}

	// 縦中横の起点
	function drawHCHText(x, y, text, col, opa=255, aa=true, sl=255, sc=0, sw=0, sofx=0, sofy=0) {
		flag_hch = true;

		onRubyPhase(false);
		font.angle = 0;
		ch_width = font.getTextHeight(text);
		ch_height = font.getTextWidth(text);

		if(ruby!="") {
			// 縦書きのｘは右上なので、ルビ計算用のxを修正
			var rubybase = font.height > ch_height ? (font.height+ch_height)/2:ch_height;
			font.angle = 2700;	// calcRubyPosはアングルを計算に入れないので、ここで変更
			// ルビの位置はhchcurrentの補正を受けてはいけないので、ここで減算
			calcRubyPos(x + rubybase - ml.hchCorrect, y);
			x += expandX; y += expandY;	// 位置補正

			ch_left = x;
			ch_top = y;

			onRubyPhase(true);
			font.angle = 2700;
			drawTextWithGrad(rx, ry, ruby, 
				ml.r_ChColor, opa, aa, sl, 
				(ml.edge?ml.r_EdgeColor:ml.r_ShadowColor), sw, sofx, sofy);

			flag_hch = true;
			onRubyPhase(false);
			font.angle = 0;
			drawTextWithGrad(x, y, text, col, opa, aa, sl, sc, sw, sofx, sofy);
		} else {
			flag_hch = true;
			x += expandX; y += expandY;	// 位置補正
			ch_left = x;
			ch_top = y;
			drawTextWithGrad(x, y, text, col, opa, aa, sl, sc, sw, sofx, sofy);
		}

		name = text;

		if(rot!="n" || rotMove!="n") {	// 回転
			textwidth = font.getTextWidth(text); textheight = font.getTextHeight(text);
			r_cw = width, r_ch = height;
			rotateText(x, y, rad+radMove, true);
		}

		show(left - slantMoveX, top - slantMoveY, , (skip?0:deffadetime) ) if !doing;
	}

/*
/ @ 文字グラデーション
*/
	// グラデーション付の文字を描くか判断する。
	// 
	function drawTextWithGrad(x, y, text, col, opa=255, aa=true, sl=255, sc=0, sw=0, sofx=0, sofy=0) {
		if(__flag_ChGradRecter_OBJECT_DEFINED__==0) {
			// ChGradが入ってない
			drawTextPlain(...);
			return;
		}

		with(ml.chGradObj) { 
			if(!.doChGrad
			  || ( !.ch && !.edge && (flag_ch || flag_hch) )
			  || ( !.ruby && flag_ruby )  ) {
				drawTextPlain(...);
				return;
			}
		}

		// ChGrad
		var save_visible = this.visible;
		this.visible = false;

		initGradComplexLayer();

		// eachCh
		// 文字グラデを全文字描画 → エッジを描画
		if(ml.chGradObj.eachCh && text.length > 1 && !flag_hch) {
			var c_x = x, c_y = y;
			for(var i=0; i<text.length; i++) {
				drawGradCh(c_x, c_y, text[i], col, opa, aa, sl, sc, sw, sofx, sofy);
				if(vertical) {	c_y += font.getTextWidth(text[i]); }
				else {			c_x += font.getTextWidth(text[i]); }
			}
			c_x = x, c_y = y;
			for(var i=0; i<text.length; i++) {
				restrictGradEffectOnChAndEdge(c_x, c_y, text[i], col, opa, aa, sl, sc, sw, sofx, sofy);
				if(vertical) {	c_y += font.getTextWidth(text[i]); }
				else {			c_x += font.getTextWidth(text[i]); }
			}
		} else {
			drawGradCh(x, y, text, col, opa, aa, sl, sc, sw, sofx, sofy);
			restrictGradEffectOnChAndEdge(x, y, text, col, opa, aa, sl, sc, sw, sofx, sofy);
		}

		finalizeGradComplexLayer();

		this.visible = save_visible;
	}

	// 
	function drawGradCh(x, y, text, col, opa=255, aa=true, sl=255, sc=0, ee=0, sofx=0, sofy=0) {
		// グラデを掛けないところをあらかじめ黒にしておく
		var gColor = 0x000000, gEdgeColor = 0x000000;
		if(ml.chGradObj.ch) { gColor = 0xFFFFFF; }
		if(ml.chGradObj.edge) { gEdgeColor = 0xFFFFFF; }
		GradChLayer.drawTextPlain(x, y, text, gColor, opa, aa, sl, gEdgeColor, ee, sofx, sofy);

		// 描画の高速化のため、生成するグラデの大きさには制約を設ける
		var tw = font.getTextWidth(text);
		var min_WH = tw;

		if(vertical && !flag_hch) {
//			// Shift-JISのみ - 要らない？
//			if(text.length==1 & text<='ﾟ' & '!'<=text ) {
//				// アルファベットなどは横向きに表示されるので、縦仕様で表現。
//				tw = font.getTextHeight(text);
//			}
			if(min_WH < font.height) {	// 細長い文字のとき
				min_WH = font.height;
				y -= (min_WH-tw)/2;
			}
			OperateGradationBase(x-font.height, y, font.height, min_WH, ee, sofx, sofy);
		} else {
			if(min_WH < font.height) {	// 細長い文字のとき
				min_WH = font.height;
				x -= (min_WH-tw)/2;
			}
			OperateGradationBase(x, y, min_WH, font.height, ee, sofx, sofy);
		}
	}

	function restrictGradEffectOnChAndEdge(x, y, text, col, opa=255, aa=true, sl=255, sc=0, ee=0, sofx=0, sofy=0) {
		// 特殊なケース。不要。
//		if(sc === 0x000000 && col === 0x000000) {
//			return;
//		}

		// グラデ画像はグラデを掛けないところが黒くなっているので
		// グラデを掛けたいところだけを黒にした文字と比較(明)合成することで
		// 確実にグラデとその他の色が合成される
		var gColor = col, gEdgeColor = sc;
		if(ml.chGradObj.ch) { gColor = 0x000000; }
		if(ml.chGradObj.edge) { gEdgeColor = 0xFFFFFF; sl=0; ee=0; sofx=0; sofy=0; }

		with(cl) {
			.face = dfAlpha; .type = type;
			.assignFont(this);
			.setSize(this.width, this.height);
			.fillRect(0, 0, .width, .height, 0x00000000);
			.drawText(x, y, text, gColor, opa, aa, sl, gEdgeColor, ee, sofx, sofy);
			.face = face;
		}
		GradChLayer.operateRect(0, 0, cl, 0, 0, this.width, this.height, omPsLighten, 255); 
	}

	function OperateGradationBase(x, y, w, h, ee, sofx, sofy) {
		// 初期Gradation x y w h
		//   一文字の中でグラデーションが完結する
		var g_x=x, g_y=y, g_w=w, g_h=h;
		var p_x=0, p_y=0, p_w=w, p_h=h;
		var r = 0;

		if(ml.chGradObj.withRuby) {
			if(vertical) {
				if(flag_ruby) p_x = ch_height + ml.rubyOffset;
				g_w = ch_height + ml.rubySize + ml.rubyOffset;
			} else {
				if(flag_ch) p_y += ml.rubySize + ml.rubyOffset;
				g_h = ch_height + ml.rubySize + ml.rubyOffset;
			}
		}

		if(ml.chGradObj.withEdge) {
			// エッジ・影の分だけグラデ領域を拡張
			if(ee > 0) { // エッジ
			//	var r = ee*1.414;
				var r = ee*2;
				g_x -= r/2;
				g_y -= r/2;
				p_w += r;
				p_h += r;
				g_w += r;
				g_h += r;
			} else if(sofx!=0 || sofy!=0) {
				if(sofx>0) { g_w += sofx; p_w += sofx; } else { g_x += sofx; p_w -= sofx; }
				if(sofy>0) { g_h += sofy; p_h += sofy; } else { g_y += sofy; p_h -= sofy; }
			}
		}

		switch(ml.chGradObj.method) {
			case 'Rect':
				ml.chGradObj.set( %[
					width:g_w, height:g_h, x:0, y:0, w:g_w, h:g_h
				] );
			break;
			case 'Circle':
				// 円の中心を、現在のRect範囲の中心に設定する
				var c_x = g_w/2, c_y = g_h/2;
				var c_r = ((c_x>c_y?c_x:c_y)*1.414);
				ml.chGradObj.set( %[
					width:g_w, height:g_h, x:c_x, y:c_y, r:c_r
				] );
			break;
			default:
				ml.chGradObj.set( %[
					width:g_w, height:g_h, x:0, y:0, w:g_w, h:g_h
				] );
			break;
		}

		GradChLayer.operateRect(g_x, g_y, ml.chGradObj.showLayer, p_x, p_y, p_w, p_h, omMultiplicative, 255);
	}

/*
/ @ 文字回転
*/
	function rotateText(x, y, trad, set) {
	// 文字を回転させる
	// レンダリングフォントでは angle が指定できないためアフィン変換による回転
		with(cl) {
			if(set) {	// 初期計算・回転・初期補正
				var r_c = (r_cw > r_ch) ? r_cw : r_ch;	// レイヤ縦幅横幅の大きい方
				r_cwh = (r_cw - r_ch)\2;				// 縦横幅の差分の1/2

				.setPos(0, 0, r_c*1.415, r_c*1.415);	// 回転するために√2だけ拡大
				r_a = (.width-r_c)\2;					// 拡大した余白の大きさ

				// 回転の中心座標決定
				r_tx = r_a + (r_c-r_cw)\2 + x + (vertical ? -textwidth/2: textwidth/2 );
				r_ty = r_a + (r_c-r_ch)\2 + y + textheight/2;

				width = .width, height = .height;	// 見切れないよう本体も拡大
				.fillRect(0, 0, .width, .height, 0x00000000);
				// 文字をコピー
				if(r_cwh>0) {	 // 横幅＞縦幅
					.operateRect(r_a, r_a+r_cwh, this, 0, 0, width, height, omAuto, 255);
					changedChLinePos( -r_a, -(r_a+r_cwh) );
				} else {	 // 縦幅＞横幅
					.operateRect(r_a-r_cwh, r_a, this, 0, 0, width, height, omAuto, 255);
					changedChLinePos( -(r_a-r_cwh), -r_a );
				}
			}

			var s = Math.sin(trad), c = Math.cos(trad);
			affineCopy(
				cl, 0, 0, width, height, true, 
				c, -s, s, c, r_tx-(r_tx*c+r_ty*s), r_ty+(r_tx*s-r_ty*c), 
				stCubic, true
			);
		}
	}

/*
/ @ 雑GradCh用
*/
	// ルビを描画中か否かをセットする
	function onRubyPhase(flag) {
		with(font) {
			if(flag) {
				flag_ruby = true;
				.face=ml.r_UserFace; .bold=ml.r_Bold; .height=ml.rubySize;
			} else {
				flag_ruby = false;
				.face=ll.font.face; .bold=ll.font.bold; .height=ll.font.height;
			}
		}
	}

	// 複雑な文字列を描画するとき用
	function initGradComplexLayer() {
		// グラデ描画用Chレイヤ
		GradChLayer = this;
		if(flag_GradComplexChar) {
			GradChLayer = ml.getFadeChLayer();
			with(GradChLayer) {
				.face = this.face;
				.holdAlpha = this.holdAlpha;
				.type = this.type;
				.setPos(0,0, this.width, this.height);
				.fillRect(0, 0, .width, .height, 0x00000000);
				.assignFont(this);
			}
		}
	}

	// 複雑な文字列のときのみ処理
	function finalizeGradComplexLayer() {
		if(flag_GradComplexChar) {
			this.operateRect(0, 0, GradChLayer, 0, 0, width, height, omAlpha, 255);	// 加算合成

			GradChLayer.stopLayerMoving();
			GradChLayer.resetChLayer();
			ml.putFadeChLayer(GradChLayer);
		}
	}

	function drawTextPlain(x, y, text, col, opa, aa, sl, sc, sw, sofx, sofy) {
		super.drawText(...);
	}
}
@endif
