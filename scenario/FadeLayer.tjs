/*------------------------------------------------------------------------------
/		Copyright (C) サークル煌明	All Rights Reserved.
/			FadeLayer
/ 
/ 単純線形移動、透明度変化によるフェード
/ モーダル自動変更機能
/ 無効化時に実行される関数を任意のタイミングで追加 (該当関数の無効化対策有)
/ マウスイベント、キーイベントを親に送るかの設定
/ 視認性向上のための影付き文字描画
/ 
/ この際 UsefulLayer とかに名前を変えるのもいいと思う。ダサいか。
/  ==> BasesLayer FoundationLayer PrincipalLayer ConceptualLayer ConcreteLayer ???
/----------------------------------------------------------------------------*/
@if(__FADELAYER_DEFINED__==0)
@set(__FADELAYER_DEFINED__=1)
// Scripts.execStorage("subroutine.tjs");
// Scripts.execStorage("color.tjs");
Scripts.execStorage("SharedContinuousHandler.tjs");
//Scripts.execStorage("MouseCursorMover.tjs");
var modals = [];		// モーダル状態のレイヤ管理
class FadeLayer extends Layer {
	var funconfinalize = [];	// オブジェクトが解放される直前に実行される処理
	// フェード終了後に実行される処理。引数には自分自身を送るだけ
	var afterfunction;

	var startopa, goalopa;
	var startl, goall;
	var startt, goalt;
	var time, accel;
	var isenabled = true;		// フェード実行中も操作を受け付けるか？
	var nowisenabled;
	var starttick;
	var doing;			// 移動中
	var modal = false;		// モーダル状態なら真

	var __focused;

	var storage = "";		// 読み込んだ画像名

	var deffadetime = 300;
	// 親にも押されたキーを送るか？ボタンとかそういうオブジェクトで
	var sendKeyforParent = false;

	var useHIhandler;

	// フォーカスを受け取った時にマウスを真ん中に移動させるか？
//	var moveMouseWhenFocus = false;


	function FadeLayer(window, parent, useHI = false) {
		super.Layer(...);
		useHIhandler = useHI;		// とりあえず基本偽

	// show で出現させること前提なので、ここで透明にしてあるから注意ね。
		opacity	= 0;
		type = ltAlpha;
		face = dfAlpha;
		focusable = false;
	}

	function finalize() {
		stopLayerMoving();

		if(modal) this.removeMode();	// モーダル状態の確実な解除
		// このオブジェクトが解放されたときに実行される処理の実行
		// 呼び出される処理 (を持ったオブジェクト) が既に無効化されている場合は
		// 実行しない (message なし)
		for(var i=0; i<funconfinalize.count; i++) {
			if(!funconfinalize[i][0] isvalid) continue;	// エラー回避
			funconfinalize[i][0](funconfinalize[i][1]*);
		}
		super.finalize(...);
	}

	// このオブジェクトが解放されたときに実行される処理の追加
	// 第一因数は処理、第二因数からはその処理に渡す引数を。
	// addFuncAfterFinalize(parent.onChildClose, this, this.name) とすれば、
	// 親レイヤで onChildClose(this(このオブジェクト), this.name) が実行できます
	function addFuncAfterFinalize(func, funcs*) {
		funconfinalize.add([func, funcs]);
	}

	// このオブジェクトが解放されたときに実行される処理の削除
	// 二次元なので場所指定しか出来ないから、使用には十分な注意を。
	function removeFuncAfterFinalize(num) {
		funconfinalize.erase(num);
	}

	// このオブジェクトが解放されたときに実行される処理の削除 その 2
	// テスト。名前指定でいけるはず。動作は保証できていません
	function removeFuncAfterFinalize2(func) {
		for(var i=0;i<funconfinalize.count;i++) {
			if(funconfinalize[i][0]==func) { funconfinalize.erase(i); i--; }
		}
		dm('removeFuncAfterFinalize2  '+funconfinalize.count);
	}

/* ----------------------------------------------------------
/ @レイヤ移動関係
/	l		: 左位置
/	t		: 上位置
/	opa		: 最終透明度
/	time	: 変化に掛かる時間
/	accel	: 加速度
/	delay	: 遅延時間 (この時間が経ってから変化開始)
/	func	: 変化終了時に実行されるもの
/	ise		: 変化中も enabled を真にするか？ (偽にしたければ false を入れる)
/--------------------------------------------------------- */
	function show(l, t, opa=255, time=deffadetime, accel, delay=0, func, ise=1) {
		setLayerMoving( 
			%[left:l, top:t, opacity:opa, time:time, accel:accel, delay:delay, func:func, isenabled:ise]
		);
	}

	// show に同じ。 opa を 0 にしてあるので消失したいときはこれで指定すると楽
	function hide(l, t, opa=0, time=deffadetime, accel, delay=0, func, ise) {
		setLayerMoving( 
			%[left:l, top:t, opacity:opa, time:time, accel:accel, delay:delay, func:func, isenabled:ise]
		);
	}

	function setLayerMoving(elm) {
		if(!this isvalid) return;
		visible		= true;	// 確実に可視
		__focused = focused;	// フォーカスの保持
		// 実行中は操作を受け付けないようにするか
		if(!elm.isenabled || !isenabled) enabled = false;

		var aS = autoSelect;
		startl		= this.left;
		goall		= aS(elm.left, this.left);
		startt		= this.top;
		goalt		= aS(elm.top, this.top);
		startopa	= this.opacity;
		goalopa		= aS(elm.opacity, this.opacity);
		this.time	= elm.time;
		this.accel	= aS(elm.accel, false);

		if(elm.isenabled==false || isenabled==false)
			this.nowisenabled = true;
		else 
			this.nowisenabled = false;

		doing		= true;

		afterfunction = elm.func if elm.func!==void;

		if(time<10 && elm.delay==0) {
			finishLayerMoving();	// 極端に時間が短い場合最終状態へ
		} else {
			starttick	= System.getTickCount() + elm.delay;
			if(useHIhandler) {
				SharedContinuousHandler_HIobject.entry(
					this,16,'onTimerLayerMover', elm.delay==0 ? true : false);
			} else {
				SharedContinuousHandler_object.entry(
					this,16,'onTimerLayerMover', elm.delay==0 ? true : false);
			}
		}
	}

	function onTimerLayerMover(tickCount) {
		var past = tickCount-starttick;
		if(past>=0) {
			if(past/time<1.0) {
				var per = calcPerAccel(past/time, accel);
				this.opacity	= startopa + int((goalopa - startopa) * per);
				this.left		= startl + int((goall - startl) * per);
				this.top		= startt + int((goalt - startt) * per);
			} else {
				finishLayerMoving();	// 最終状態に移行
			}
		}
	}

	function finishLayerMoving() {
		if(doing) {
			this.opacity = goalopa;
			this.left = goall;
			this.top = goalt;
		}
		stopLayerMoving();
	}

	function stopLayerMoving() {
		if(doing) {
			if(useHIhandler) {
				SharedContinuousHandler_HIobject.leave(this, 'onTimerLayerMover');
			} else {
				SharedContinuousHandler_object.leave(this, 'onTimerLayerMover');
			}
			doing	= false;
			enabled = true if nowisenabled;	// 操作不可は移動中のみ
			if(__focused) focus();	// フォーカスの保持
			if(opacity<1) visible = false;

			if(afterfunction!==void) {
				if(afterfunction isvalid) { afterfunction(this); }	// 終了後処理の実行
				if(this isvalid) { afterfunction = void; }
			}
		}
	}

	// hide した後、自分で自分を消す機能。func は指定しないで。
	function removeAfterHide(*) {
		afterfunction = release;
		hide(*);
	}

	function release() {
		if(this isvalid) invalidate this;
	}

/* ----------------------------------------------------------
/ @モーダル関係
/--------------------------------------------------------- */
	function setMode() {
		if(modals.count>0 && isvalid modals[-1]) {
			(super.removeMode incontextof modals[-1])();
			// 上で呼ばれるのはスーパークラスなので、onMode は別に呼ぶ
			modals[-1].onMode(false);	// modal 解除された
		}
		modals.add(this);	// (Modal 状態にする)このレイヤを登録
		super.setMode(...);	// ここで Modal にする
		this.onMode(true);	// Modal にされたイベント
	}

	function removeMode() {
		if(modals.count <= 0 || modals[-1]!==this) {
			dm(this.name+' : モーダル状態を解除しようとしたこのレイヤは、モーダル状態ではありません');
			return;
		}
		onMode(false);
		super.removeMode(...);

		modals.erase(-1);	// Modal 状態を解除したレイヤは消す
		if(modals.count>0 && isvalid modals[-1]) {
			(super.setMode incontextof modals[-1])();
			modals[-1].onMode(true);	// modal にされた
		}
	}

	// モーダル状態が変更されたときに呼ばれる
	function onMode(mode) {
	// mode : true - モーダル状態になった／false - モーダル状態が解除された
		modal = mode;
//		dm('FadeLayer['+this.name+'] '+(mode?'on':'onRemove')+'Mode : Count = '+(modals.count-1));
	}

/* ----------------------------------------------------------
/ @マウス・キーイベント
/--------------------------------------------------------- */
	function onMouseDown(x, y, button, shift) {
		super.onMouseDown(...);
	//	dm(this.name+" : "+ button);
	}

	function onKeyDown(key, shift, process) {
		super.onKeyDown(...);
	//	dm(this.name+" : "+ key);
		if(sendKeyforParent) {
//			dm('sendKeyforParent : '+this.name+' ==> '+parent.name);
			// 親に送るときはフォーカス移動を行わない
			parent.onKeyDown(key, shift, false);
		}
	}

	function onFocus(focused, focused) {
	//	if(focused!=null)
	//		dm("focus : "+this.name+"<-"+focused.name );
	//	else
	//		dm("focus : "+this.name+"<-null" );

		super.onFocus(...);
	}

	function onBlur(focused) {
	//	if(focused!=null)
	//		dm("focus : "+focused.name+"<-"+this.name );
	//	else
	//		dm("focus : null"+"<-"+this.name );

		super.onBlur(...);
	}

/* ----------------------------------------------------------
/ @SharedContinuousHandler sleep関連機能
/--------------------------------------------------------- */
	function onSleep( tick ) {
		starttick += tick;
	}

/* ----------------------------------------------------------
/ @Loadした画像名保存
/--------------------------------------------------------- */
	function loadImages(storage, key) {
		super.loadImages(storage, key);
		this.storage = storage;
	}

/* ----------------------------------------------------------
/ @その他
/--------------------------------------------------------- */
/*
	function moveCursorOnMe(time=sf.defCursorSpeed, accel=-4) {
		MouseCursorMover.set( %[
			layer:this, x:width/2, y:height/2, time:time, accel:accel
		] );
	}
*/
	function onFocus(focused, direction) {
		super.onFocus(...);
	}

/*
	function onBlur(focused) {
	//	dm('onBlur('+this.name+')');
		super.onBlur(...);
	}

	function onFocus(focused, direction) {
		if(moveMouseWhenFocus)
			moveCursorOnMe(sf.defCursorSpeed);
//setCursorPos(width/2, height/2);
		super.onFocus(...);
	}
	property visible {
		setter(x) {
			super.visible = x;
		}
		getter {
			return super.visible;
		}
	}

*/
	property enabled {
		setter(x) {
			super.enabled = x;
			// 操作不可能ならマウスイベントを下に伝えるようにする
		//	hitThreshold = enabled ? 0 : 255;
			update();
		}
		getter {
			return super.enabled;
		}
	}

	function drawText(x, y, text, col, opa=255, aa=true, sl=255, sc=0, sw=0, sofx=0, sofy=0) {
		super.drawText(x, y, text, col, opa, aa, sl, sc, sw, sofx, sofy);
	}

	function drawTextPlain(x, y, text, col, opa, aa, sl, sc, sw, sofx, sofy) {
		super.drawText(...);
	}

/*
	// 大きく書いてから線形縮小することで滑らかな文字が描画できないかテスト
	// 線形補間はできたけど、もっと高精度の縮小補間でないと綺麗に出なかったです
	// 現段階ではかえって最近傍点法のほうが綺麗に出ました
	function drawText(x, y, text, col, opa=255, aa=true, sl=0, sc=0x000000, sw=0, sofx=0, sofy=0) {
		var tmpLayer = kag.temporaryLayer;	// 一時的なレイヤ
		var upt = 2;		// 倍率 - 二倍以上は汚いだけ + CPU の無駄遣い
		with(tmpLayer) {
			.font.height = this.font.height * upt;
			.setPos(0,0,.font.getTextWidth(text), .font.getTextHeight(text));
			.fillRect(0, 0, .width, .height, 0x00000000);
			.drawText(0, 0, text, col, opa, aa, sl, sc, sw, sofx, sofy);

			var orgface = face;
			face = dfOpaque;
//			operateStretch(x, y, .width\upt, .height\upt, tmpLayer, 0, 0, .width, .height, omAddAlpha, 255, stFastLinear);
			operateStretch(x, y, .width\upt, .height\upt, tmpLayer, 0, 0, .width, .height, omAddAlpha, 255, stCubic|stRefNoClip);
			face = orgface;
		}
	}
*/

}
@endif
